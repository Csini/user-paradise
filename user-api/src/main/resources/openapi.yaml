openapi: 3.0.3
info:
  description:
    Appliuserion providing user paradise.
  version: 1.0.0
  title: User Paradise API
  contact:
    name: 
      User Paradise Co.

servers:
  - url: http://localhost:9010/user-business/v1
    description: Local environment (mainly for development)

tags:
  - name: User
    description: Provides CRUD endpoints to User

paths:
  /api/users:
    get:
      summary: Get all users.
      tags: 
        - User
      operationId: readAllUser
      x-spring-paginated: true
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Zero-based page index (0..N) default 0
        - in: query
          name: size
          schema:
            type: integer
          required: false
          description: The size of the page to be returned default 20
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a user.
      tags: 
        - User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/users/{id}:
    parameters:
    - name: id
      in: path
      required: true
      schema: 
          type: integer
          example: 123
    get:
      summary: Get a user by its id.
      tags: 
        - User
      operationId: readUser
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a user.
      tags: 
        - User
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a user.
      tags: 
        - User
      operationId: deleteUser
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: integer
                example: 123
                description: "id of the deleted User"
        400:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    UserResponse:
      type: object
      required: [size, items]
      properties:
        size:
          example: 1
          type: integer
          format: int64
        items:
          items:
            $ref: '#/components/schemas/User'
          type: array
    User:
      description: Type “User”.
      type: object
      required: [id, firstname, lastname, status, job, fullname]
      properties:
        id:
          type: integer
          example: 123
        firstname:
          type: string
          example: "Tom"
          minLength: 2
          maxLength: 64
        lastname:
          type: string
          example: "Selec"
          minLength: 2
          maxLength: 64
        fullname:
          type: string
          example: "Tom Selec"
        address:
          type: string
          example: "1053 Budapest Álom utca 2."
          minLength: 0
          maxLength: 128
        telephone:
          type: string
          example: "06-123-4567"
          minLength: 0
          maxLength: 128
        status:
          type: string
          example: 0
          minLength: 0
          maxLength: 1
        activelabel:
          type: string
          example: "igen"
        job:
          type: string
          enum: ["ISMERETLEN", "KERTESZ", "HENTES", "PEK"]
        lastUpdatedOn:
          type: string
          format: date-time
    Error:
      description: Error object
      example:
        message: message
        timestamp: timestamp
      properties:
        message:
          description: Error message
          type: string
        timestamp:
          description: The timestamp the error has occured
          type: string
      required:
      - message
      - timestamp
      type: object
  responses:
    BadRequestError:
      description: Syntax error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Request cannot be processed because it is syntactically wrong
            timestamp: '2023-04-20T11:00:00Z'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Internal server error
            timestamp: '2023-04-20T11:00:00Z'